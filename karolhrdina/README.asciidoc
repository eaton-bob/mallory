mallory
=======

== Description
Proof of concept of a series of solutions to a series of problems we are facing at work. 

The problem definitions are abstracted from a real world project. Any specific
project domain knowledge is cut off and project dependencies are kept to a bare
minimum - only https://github.com/zeromq/malamute/[malamute] is required.

== Problem definition
These are the problems we are trying to solve. 

=== Problem 1
Trigger alert based on evaluation of 1 .. N measurements.

.Note:
Here, measurement rules are hardcoded. The PoC for run-time configurable rules
is located in https://github.com/eaton-bob/mallory/tree/master/lua[../lua]
directory and is being investigated by miska.

=== Problem 2
Manage state of alert.

User can assign state (i.e. acknowledge/un-acknowledge) that he doesn't want to
see again.

=== Problem 3
Recognize alert has ended and send information about alert end.

Before we triggered an alarm when certain conditions were met (i.e. temperature
>= 90 C) and that was it. We want to recognize when temperature drops below 90
again and send information about alert end.

=== Problem 4
Acknowledgement state of alert is too coarse-grained. We want to be able to
acknowledge alert for one device while still be able to recieve that same alert
for different device.

=== Problem 5
Ability to list history of states for certain alert/device with timestamps.

WIP

== Protocol overview
Since https://github.com/zeromq/malamute/[malamute] is the core communication
"technology" here, we omit boilerplate blah blah's like the need to connect to
a given endpoint etc... 

[[RFC_METRICS]]
=== RFC_METRICS - Metrics protocol
Connects METRIC_PRODUCER peers to METRIC_CONSUMER peers.

The METRIC_PRODUCER peer registers as producer on METRICS stream. +
The METRIC_CONSUMER peer listens on METRICS stream.

The protocol has one message:

* metric_name/value 

where '/' indicates a multipart string message and 'subject' of the message is
name of the device.

[[RFC_EVALS]]
=== RFC_EVALS - Evaluations protocol
Connects EVALUATOR_PRODUCER peers to EVALUATOR_CONSUMER peers.

The EVALUATOR_PRODUCER peer registers as producer on EVALS stream. +
The EVALUATOR_CONSUMER peer listens on EVALS stream.

The protocol has one message:

* rule_name/device/state

where '/' indicates a multipart string message, 'subject' of the message is
"<rule_name>@<device>" and 'state' is one of [ ACTIVE | RESOLVED ]

[[RFC_ALERT]]
=== RFC_ALERT - Alerts protocol
Connects ALERT_PRODUCER peers to ALERT_CONSUMER peers.

The ALERT_PRODUCER peer registers as producer on ALERTS stream. +
The ALERT_CONSUMER peer listens on ALERTS stream.

The protocol has one message:

* alert_name/device/state

where '/' indicates a multipart string message, 'subject' of the message is
"<alert_name>@<device>" and 'state' is one of [ ACTIVE | RESOLVED ]

[[RFC_UI]]
=== RFC_UI - User interface protocol
Connects USER peer to SYSTEM peer.

The USER peer sends one of the following messages using MAILBOX SEND to SYSTEM peer:

. LIST - request list of acknowledged alerts
. ACK/alert/device/state - set acknowledge state of 'alert' for 'device' to 'state'

where '/' indicates a multipart string message, 'alert' is alert name, 'device'
is device name, 'state' is one of [ ON | OFF ] and 'subject' of the message MAY
contain the first part of the message (command).

The SYSTEM peer MUST send the appropriate message message back to USER peer using MAILBOX SEND:

. LIST/alert_1[/alert_2]...[/alert_N] or empty message if no alerts were acknowledged.
. ACK/alert/device/state

where '/' indicates a multipart string message, 'subject' MAY be repeated from the
request message, 'alert' is alert name, 'device' is device name and 'state' is
one of [ ON | OFF | ERROR ].  If 'state' is ERROR an additonal explanation
string part MAY appear in the message.

== Components

=== metric generator
Simple component that generates metric each 0-5 seconds, i.e. some input for our PoC.

Implements METRIC_PRODUCER part of <<RFC_METRICS, Metrics protocol>>.

Usage:: generator <mlm_endpoint> <gen_name> <metric_name> <range>

Thus `./generator ipc://@/malamute "ups-9" "temp" "100"` produces each 1-5
seconds a metric with name "temp", value between 0-100 and subject "ups-9".

File `chained_example.sh` shows how to create a named metric producer that
generates multiple metrics independently of each other. 

=== evaluator
Listens to metrics and based on hardcoded rules publishes an evaluation:

* metric "temp" excceds 70 produces ONFIRE/device/ACTIVE 
* metric "hum" exceeds 50 produces CORROSION/device/ACTIVE

For published evaluations keeps track if metric no longer satisfies the
hardcoded rule, in which case produces ONFIRE/device/RESOLVED,
CORROSION/device/RESOLVED

Implements:

* METRIC_CONSUMER part of <<RFC_METRICS, Metrics protocol>>
* EVALUATORS_PRODUCER part of <<RFC_EVALS, Evaluatios protocol>>

Usage:: rules <mlm_endpoint>

=== alert producer
Listens to evaluations and based on USER preferences triggers alerts.
Keeps and maintains state of alerts:

* Acknowledged / not acknowledged - Acknowledged alerts are not published on ALERTS stream

Implements:

* EVALUATORS_CONSUMER part of <<RFC_EVALS, Evaluatios protocol>>
* ALERT_PRODUCER part of <<RFC_ALERTS, Alerts protocol>>
* SYSTEM part of <<RFC_UI, User interface protocol>> 


Usage:: alert <mlm_endpoint>


=== alert consumer
Represents an abstraction of final alert consumers like SMS
gateway, SMTP server, XMPP server and possibly many others.  The main purpose
of this component is to receive alert and simulate some sending operation.

Implements ALERT_CONSUMER part of <<RFC_ALERTS, Alerts protocol>>

Usage:: consumer <mlm_endpoint> <function>

Thus `./consumer ipc://@/malamute "SMS"` simulates and SMS gateway

=== user interface
Implements:

* USER part of <<RFC_UI, User interface protocol>>


Usage:: user <mlm_endpoint> [LIST | ACK <alert> <device> [ON | OFF]]

Thus

* `user ipc://@/malamute LIST` will list acknowledged alerts
* `user ipc://@/malamute ACK ONFIRE ON` will acknowledge ONFIRE alert and the alert consumer component will no longer send ONFIRE alerts.

